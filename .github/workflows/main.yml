name: CI Build

on:
  push:
    branches:
      - master
    paths-ignore:
      - README.md

jobs:
  versions:
    runs-on: windows-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Version comparison
        run: |
          $xml1 = [xml](Get-Content -Path Platform/fo-dicom/fo-dicom.Codecs.csproj)
          $xml2 = [xml](Get-Content -Path Setup/fo-dicom.Codecs.nuspec)
          $version1 = $xml1.Project.PropertyGroup.VersionPrefix;
          $version2 = $xml2.package.metadata.version;

          if ($version1 -ne $version2) {
              throw "csproj and nuspec versions are different"
          }
        shell: pwsh

  build_win_x64:
    runs-on: windows-2019
    needs: versions    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Setup msbuild
        uses: microsoft/setup-msbuild@v2
      - name: Compile libijg8 libraries
        run: |
          msbuild Native/Windows64/build_ALL/libijg8.x64.vcxproj /p:Configuration=Release /p:Platform=x64
      - name: Compile libijg12 libraries
        run: |
          msbuild Native/Windows64/build_ALL/libijg12.x64.vcxproj /p:Configuration=Release /p:Platform=x64
      - name: Compile libijg16 libraries
        run: |
          msbuild Native/Windows64/build_ALL/libijg16.x64.vcxproj /p:Configuration=Release /p:Platform=x64
      - name: Compile windows x64 library
        run: |
          msbuild Native/Windows64/build_ALL/Dicom.Native.vcxproj /p:Configuration=Release /p:Platform=x64
      - name: Publish windows x64 artifacts
        uses: actions/upload-artifact@v4
        with:
          name: lib-win-x64
          path: Native/Windows64/build_ALL/bin/x64/Release/Dicom.Native
      - name: Setup .NET 8.0
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'
      - name: Run unit tests
        run: dotnet test Tests/Unit/UnitTests.csproj --logger:trx

  build_linux_x64:
    runs-on: ubuntu-20.04
    needs: build_win_x64
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Compile linux x64 library
        run: |
          cd Native/POSIX64/
          cmake ./CMakeLists.txt
          make
      - name: Publish linux x64 artifacts
        uses: actions/upload-artifact@v4
        with:
          name: lib-linux-x64
          path: Native/POSIX64/lib-linux-x64
      - name: Publish managed library
        run: dotnet publish Platform/fo-dicom/fo-dicom.Codecs.csproj --configuration Release
      - name: Publish managed artifacts
        uses: actions/upload-artifact@v4
        with:
          name: lib-managed
          path: Platform/fo-dicom/bin/Release/netstandard2.0
      - name: Setup .NET 8.0
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'
      - name: Run unit tests
        run: dotnet test Tests/Unit/*.csproj --logger:trx      

  build_linux_arm64:
    runs-on: ubuntu-20.04
    needs: build_linux_x64
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Compile linux arm64 library
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu
          cd Native/POSIX64/
          cmake -DARCH_FLAG:STRING=arm64 ./CMakeLists.txt
          make
      - name: Publish linux arm64 artifacts
        uses: actions/upload-artifact@v4
        with:
          name: lib-linux-arm64
          path: Native/POSIX64/lib-linux-arm64
      # - name: Publish managed library
      #   run: dotnet publish Platform/fo-dicom/fo-dicom.Codecs.csproj --configuration Release
      # - name: Publish managed artifacts
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: lib-managed
      #     path: Platform/fo-dicom/bin/Release/netstandard2.0
      # - name: Setup .NET 8.0
      #   uses: actions/setup-dotnet@v4
      #   with:
      #     dotnet-version: '8.0.x'
      # - name: Run unit tests
      #   run: dotnet test Tests/Unit/*.csproj --logger:trx
        
  build_osx_x64:
    runs-on: macos-12
    needs: build_linux_arm64
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Compile osx x64 library
        run: |
          cd Native/POSIX64/
          cmake ./CMakeLists.txt
          make
      - name: Publish osx x64 artifacts
        uses: actions/upload-artifact@v4
        with:
          name: lib-osx-x64
          path: Native/POSIX64/lib-osx-x64
      # - name: Publish managed library
      #   run: dotnet publish Platform/fo-dicom/fo-dicom.Codecs.csproj --configuration Release
      # - name: Publish managed artifacts
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: lib-managed
      #     path: Platform/fo-dicom/bin/Release/netstandard2.0
      - name: Setup .NET 8.0
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'
      - name: Run unit tests
        run: dotnet test Tests/Unit/*.csproj --logger:trx

  build_osx_arm64:
    runs-on: macos-12
    needs: build_osx_x64
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Compile osx arm64 library
        run: |
          cd Native/POSIX64/
          cmake -DARCH_FLAG:STRING=arm64 ./CMakeLists.txt
          make
      - name: Publish osx arm64 artifacts
        uses: actions/upload-artifact@v4
        with:
          name: lib-osx-arm64
          path: Native/POSIX64/lib-osx-arm64
      # - name: Publish managed library
      #   run: dotnet publish Platform/fo-dicom/fo-dicom.Codecs.csproj --configuration Release
      # - name: Publish managed artifacts
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: lib-managed
      #     path: Platform/fo-dicom/bin/Release/netstandard2.0
      # - name: Setup .NET 8.0
      #   uses: actions/setup-dotnet@v4
      #   with:
      #     dotnet-version: '8.0.x'
      # - name: Run unit tests
      #   run: dotnet test Tests/Unit/*.csproj --logger:trx
        
  acceptance:
    runs-on: windows-latest
    needs:
      - build_win_x64
      - build_osx_arm64
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Setup .NET 8.0
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'
      - name: Run acceptance tests
        run: dotnet test Tests/Acceptance/AcceptanceTests.csproj --logger:trx
      - name: Archive files
        uses: actions/upload-artifact@v4
        with:
          name: AcceptanceImages-win-x64-${{ github.run_id }}
          path: Tests/Acceptance/bin/debug/net8.0/out

  nuget:
    runs-on: windows-latest
    needs: acceptance
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          # name: build-artifacts
          path: bin
      - name: Setup NuGet
        uses: NuGet/setup-nuget@v1
      - name: Prepare NuGet package
        run: nuget pack **/fo-dicom.Codecs.nuspec
      - name: Publish NuGet package
        env:
          NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}
        run: nuget push **/*.nupkg -Source https://api.nuget.org/v3/index.json -ApiKey ${{ secrets.NUGET_API_KEY }}          
